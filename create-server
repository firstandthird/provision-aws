#!/bin/bash
set -e
#Requires: aws cli, docker, docker-machine, docker-compose

log() {
  echo -e "  \e[33m$@\e[39m"
}

checkvar() {
  local name=$1
  local var=$2
  local default=$3
  if [[ -z "${!var}" ]]; then
    if [[ -n "$default" ]]; then
      declare "$var=$default"
    else
      log "must set $var"
      exit 1
    fi
  fi
  log "$name: ${!var}"
}

checkvar "Machine Path" "MACHINE_PATH"
checkvar "AWS Access Key ID" "AWS_ACCESS_KEY_ID"
checkvar "AWS Secret Access Key" "AWS_SECRET_ACCESS_KEY"
checkvar "AWS Region" "AWS_REGION" "us-east-1"
checkvar "Server Name" "SERVER_NAME" #apps1
checkvar "Environment" "ENVIRONMENT" #prod
checkvar "Instance" "INSTANCE_TYPE" "t2.medium"
checkvar "Size" "SIZE" 20
#checkvar "Security Group" "SECURITY_GROUP"
#checkvar "VPC" "VPC_ID"
#checkvar "Subnet" "SUBNET_ID"
#checkvar "Zone" "ZONE"
checkvar "Log Access Key" "LOG_ACCESS_KEY"
checkvar "Log Secret Key" "LOG_SECRET_KEY"
if [[ -n "$LOAD_BALANCER" ]]; then
  log "Load Balancer: Yes"
else
  log "Load Balancer: No"
fi
if [[ -n "$AUTO_DEPLOY" ]]; then
  log "Auto Deploy: Yes"
  checkvar "Github User" "GH_USER"
  checkvar "Github Token" "GH_TOKEN"
  checkvar "Deploy Whitelist" "DEPLOY_WHITELIST"
  checkvar "Deploy Secret" "DEPLOY_SECRET"
  checkvar "NODE_ENV" "NODE_ENV"
  checkvar "Domain" "DOMAIN"
else
  log "Auto Deploy: No"
fi

FULL_NAME=${ENVIRONMENT}_${SERVER_NAME}
log "Full Server Name: $FULL_NAME"

if [[ -n "$DEBUG" ]]; then
  log "debug mode. stopping"
  exit 0
fi

read -p "Are you sure? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  exit 1
fi

create_log_group() {
  local name=$1
  local out=$(aws logs describe-log-groups --log-group-name-prefix $name --output text)
  if [[ -z "$out" ]]; then
    log "Creating Log Group: $name"
    aws logs create-log-group --log-group-name $name
  fi
}
create_log_group $ENVIRONMENT
if [[ -n "$LOAD_BALANCER" ]]; then
  create_log_group $ENVIRONMENT-nginx
fi

log "Creating EC2 Instance"
echo $AWS_REGION
docker-machine -s $MACHINE_PATH create \
  --driver amazonec2 \
  --amazonec2-root-size $SIZE \
  --amazonec2-region $AWS_REGION \
  --amazonec2-instance-type $INSTANCE_TYPE \
  --engine-env "AWS_ACCESS_KEY_ID=$LOG_ACCESS_KEY" \
  --engine-env "AWS_SECRET_ACCESS_KEY=$LOG_SECRET_KEY" \
  --engine-env "AWS_DEFAULT_REGION=$AWS_REGION" \
  --engine-opt "log-driver=awslogs" \
  --engine-opt "log-opt awslogs-group=$ENVIRONMENT" \
  $FULL_NAME

  #--amazonec2-vpc-id $VPC_ID \
  #--amazonec2-zone $ZONE \
  #--amazonec2-subnet-id $SUBNET_ID \
  #--amazonec2-security-group $SECURITY_GROUP \

log "Installing htop"
docker-machine -s $MACHINE_PATH ssh $FULL_NAME "sudo apt-get install -y htop"

if [[ -n "$LOAD_BALANCER" ]]; then
  log "Setting up load balancer"
  docker-compose -f docker-compose.yml up -d dockergen
  docker-compose -f docker-compose.yml up -d nginx
fi

if [[ -n "$AUTO_DEPLOY" ]]; then
  log "Setting up deploy"
  docker-compose -f docker-compose.yml up -d deploy
fi

log "Getting Public DNS"
aws ec2 describe-instances --filters Name=tag:Name,Values="$FULL_NAME" --query "Reservations[].Instances[].PublicDnsName" --output text
