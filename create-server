#!/bin/bash
#Requires: aws cli, docker, docker-machine, docker-compose
log() {
  echo -e "  \e[33m$@\e[39m"
}
abort() {
  log $@
  exit 1
}

DIRNAME=$(dirname ${BASH_SOURCE[0]})

checkvar() {
  local name=$1
  local var=$2
  local default=$3
  if [[ -z "${!var}" ]]; then
    if [[ -n "$default" ]]; then
      eval "$var=$default"
    else
      log "must set $var"
      exit 1
    fi
  fi
  log "$name: ${!var}"
}

checkvar "Machine Path" "MACHINE_PATH"
if [[ -n "$AWS_PROFILE" ]]; then
  checkvar "AWS Profile" "AWS_PROFILE"
  AWS_DEFAULT_PROFILE=$AWS_PROFILE
else
  checkvar "AWS Access Key ID" "AWS_ACCESS_KEY_ID"
  checkvar "AWS Secret Access Key" "AWS_SECRET_ACCESS_KEY"
fi
checkvar "AWS Region" "AWS_REGION" "us-east-1"
export AWS_DEFAULT_REGION=$AWS_REGION
export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
checkvar "Server Name" "SERVER_NAME" #apps1
checkvar "Environment" "ENVIRONMENT" #prod
FULL_NAME=${ENVIRONMENT}-${SERVER_NAME}
log "Full Server Name: $FULL_NAME"
checkvar "Instance" "INSTANCE_TYPE" "t2.medium"
checkvar "Size" "SIZE" 20
if [[ -n "$VPC_ID" ]]; then
  checkvar "VPC" "VPC_ID"
  checkvar "Security Group" "SECURITY_GROUP"
  checkvar "Subnet" "SUBNET_ID"
  checkvar "Zone" "ZONE"
else
  log "VPC: auto generated"
fi
checkvar "Log Group" "LOG_GROUP" "$ENVIRONMENT--"
checkvar "Log Access Key" "LOG_ACCESS_KEY"
checkvar "Log Secret Key" "LOG_SECRET_KEY"
if [[ -n "$LOAD_BALANCER" ]]; then
  log "Load Balancer: Yes"
  checkvar "Root Domain" "ROOT_DOMAIN"
  checkvar "Domain Prefix" "DOMAIN_PREFIX" $FULL_NAME
  DOMAIN="${DOMAIN_PREFIX}.${ROOT_DOMAIN}"
  log "Full Domain: $DOMAIN"
  checkvar "Load Balancer Log Group" "LOG_GROUP_LB" "$ENVIRONMENT-nginx"

  if [[ -n "$AUTO_DEPLOY" ]]; then
    log "Auto Deploy: Yes"
    checkvar "Github User" "GH_USER"
    checkvar "Github Token" "GH_TOKEN"
    checkvar "Deploy Secret" "DEPLOY_SECRET"
    if [[ -n "$AUTO_DEPLOY_BRANCH" ]]; then
      log "Deploy Branch: $AUTO_DEPLOY_BRANCH"
    fi
    if [[ -n "$AUTO_DEPLOY_SLACK" ]]; then
      log "Deploy Slack Hook: $AUTO_DEPLOY_SLACK"
    fi
    checkvar "NODE_ENV" "NODE_ENV"
    log "Deploy Domain: deploy.${DOMAIN}"
  else
    log "Auto Deploy: No"
  fi
else
  log "Load Balancer: No"
fi

if [[ -n "$MONGO" ]]; then
  log "MongoDb: Yes"
else
  log "MongoDb: No"
fi
if [[ -n "$MYSQL" ]]; then
  log "MySQL: Yes"
  checkvar "MySQL Password" "MYSQL_PASS"
  checkvar "MySQL Database" "MYSQL_DB"
else
  log "MySQL: No"
fi
if [[ -n "$LETSENCRYPT" ]]; then
  log "Lets Encrypt: Yes"
else
  log "Lets Encrypt: No"
fi

if [[ -n "$DEBUG" ]]; then
  log "debug mode. stopping"
  exit 0
fi

read -p "Are you sure? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
  exit 1
fi

create_log_group() {
  local name=$1
  local out=$(aws logs describe-log-groups --log-group-name-prefix $name --output text)
  if [[ -z "$out" ]]; then
    log "Creating Log Group: $name"
    aws logs create-log-group --log-group-name $name
    test $? -eq 0 || abort "create log group failed"
  else
    log "Skipping log group $name, already created"
  fi
}

create_log_group $LOG_GROUP
#TODO: create app metrics

out=$(docker-machine -s $MACHINE_PATH ls | grep $FULL_NAME)
if [[ "$?" == 1 ]]; then
  log "Creating EC2 Instance"
  #TODO: make this better
  if [[ -n "$VPC_ID" ]]; then
    docker-machine -s $MACHINE_PATH create \
      --driver amazonec2 \
      --amazonec2-root-size $SIZE \
      --amazonec2-region $AWS_REGION \
      --amazonec2-instance-type $INSTANCE_TYPE \
      --amazonec2-vpc-id $VPC_ID \
      --amazonec2-zone $ZONE \
      --amazonec2-subnet-id $SUBNET_ID \
      --amazonec2-security-group $SECURITY_GROUP \
      --engine-env "AWS_ACCESS_KEY_ID=$LOG_ACCESS_KEY" \
      --engine-env "AWS_SECRET_ACCESS_KEY=$LOG_SECRET_KEY" \
      --engine-env "AWS_DEFAULT_REGION=$AWS_REGION" \
      --engine-opt "log-driver=awslogs" \
      --engine-opt "log-opt awslogs-group=$LOG_GROUP" \
      $FULL_NAME
  else
    docker-machine -s $MACHINE_PATH create \
      --driver amazonec2 \
      --amazonec2-root-size $SIZE \
      --amazonec2-region $AWS_REGION \
      --amazonec2-instance-type $INSTANCE_TYPE \
      --engine-env "AWS_ACCESS_KEY_ID=$LOG_ACCESS_KEY" \
      --engine-env "AWS_SECRET_ACCESS_KEY=$LOG_SECRET_KEY" \
      --engine-env "AWS_DEFAULT_REGION=$AWS_REGION" \
      --engine-opt "log-driver=awslogs" \
      --engine-opt "log-opt awslogs-group=$LOG_GROUP" \
      $FULL_NAME
  fi
  test $? -eq 0 || abort "docker-machine failed"

  log "Installing htop"
  docker-machine -s $MACHINE_PATH ssh $FULL_NAME "sudo apt-get install -y htop"

  test $? -eq 0 || abort "htop install failed"
else
  log "skipping EC2, already exists"
fi


eval $(docker-machine -s $MACHINE_PATH env $FULL_NAME)
test $? -eq 0 || abort "failed to set env"

#TODO download compose from github
compose() {
  cmd=$@
  SERVER_NAME=$SERVER_NAME \
    ENVIRONMENT=$ENVIRONMENT \
    LOG_GROUP=$LOG_GROUP \
    LOG_GROUP_LB=$LOG_GROUP_LB \
    DEPLOY_SECRET=$DEPLOY_SECRET \
    DOMAIN=$DOMAIN \
    GH_TOKEN=$GH_TOKEN \
    GH_USER=$GH_USER \
    NODE_ENV=$NODE_ENV \
    AWS_REGION=$AWS_REGION \
    MYSQL_PASS=$MYSQL_PASS \
    MYSQL_DB=$MYSQL_DB \
    AUTO_DEPLOY_BRANCH=$AUTO_DEPLOY_BRANCH \
    docker-compose -f $DIRNAME/docker-compose.yml $@
}

if [[ -n "$LOAD_BALANCER" ]]; then
  log "Setting up load balancer"
  create_log_group $LOG_GROUP_LB
  compose pull dockergen
  compose up -d dockergen
  test $? -eq 0 || abort "setting up dockergen failed"
  compose pull nginx
  compose up -d nginx
  test $? -eq 0 || abort "setting up nginx failed"
fi

if [[ -n "$LETSENCRYPT" ]]; then
  log "Setting up lets encrypt"
  compose pull letsencrypt
  compose up -d letsencrypt
  test $? -eq 0 || abort "setting up lets encrypt failed"
fi

if [[ -n "$AUTO_DEPLOY" ]]; then
  log "Setting up deploy"
  compose pull deploy
  compose up -d deploy
  test $? -eq 0 || abort "setting up deploy failed"
fi

if [[ -n "$MONGO" ]]; then
  compose pull mongo
  compose up -d mongo
  test $? -eq 0 || abort "setting up mongo failed"
fi

if [[ -n "$MYSQL" ]]; then
  compose pull mysql
  compose up -d mysql
  test $? -eq 0 || abort "setting up mysql failed"
fi

log "Getting Public DNS"
aws ec2 describe-instances --filters Name=tag:Name,Values="$FULL_NAME" --query "Reservations[].Instances[].PublicDnsName" --output text

#TODO: add to route 53
